from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from enum import Enum
from datetime import datetime
import uuid


class VulnerabilityTool(str, Enum):
    """Vulnerability scanning tools available"""
    DALFOX = "dalfox"            # XSS scanner (param/context-aware)
    XSSTRIKE = "xsstrike"        # XSS detection via headless browser
    SQLMAP = "sqlmap"            # SQLi scanner (auto-detection)
    CRLFUZZ = "crlfuzz"          # CRLF Injection tester
    QSREPLACE = "qsreplace"      # Replace values in URLs (open redirect)
    NUCLEI = "nuclei"            # Vulnerability templated scanner
    NUCLEI_TEMPLATES = "nuclei-templates"  # Template repo for nuclei


class VulnerabilityType(str, Enum):
    """Types of vulnerabilities that can be detected"""
    XSS = "xss"
    SQLI = "sqli"
    CRLF = "crlf"
    OPEN_REDIRECT = "open_redirect"
    TEMPLATE_INJECTION = "template_injection"
    AUTHENTICATION = "authentication"
    AUTHORIZATION = "authorization"
    INFORMATION_DISCLOSURE = "information_disclosure"
    MISCONFIGURATION = "misconfiguration"
    DENIAL_OF_SERVICE = "denial_of_service"
    REMOTE_CODE_EXECUTION = "remote_code_execution"
    LOCAL_FILE_INCLUSION = "local_file_inclusion"
    REMOTE_FILE_INCLUSION = "remote_file_inclusion"
    XPATH_INJECTION = "xpath_injection"
    LDAP_INJECTION = "ldap_injection"
    COMMAND_INJECTION = "command_injection"
    CLICKJACKING = "clickjacking"
    CORS_MISCONFIGURATION = "cors_misconfiguration"
    INSECURE_DESERIALIZATION = "insecure_deserialization"
    BROKEN_AUTHENTICATION = "broken_authentication"
    OTHER = "other"


class VulnerabilitySeverity(str, Enum):
    """Vulnerability severity levels"""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"


class VulnerabilityInfo(BaseModel):
    """Individual vulnerability information"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    url: str
    parameter: Optional[str] = None
    payload: Optional[str] = None
    method: str = "GET"
    vulnerability_type: VulnerabilityType
    severity: VulnerabilitySeverity
    confidence_score: float = Field(ge=0.0, le=1.0)
    description: str
    evidence: Optional[str] = None
    remediation: Optional[str] = None
    references: List[str] = Field(default_factory=list)
    tool_used: VulnerabilityTool
    request_data: Optional[Dict[str, Any]] = None
    response_data: Optional[Dict[str, Any]] = None
    discovered_at: datetime = Field(default_factory=datetime.utcnow)


class VulnerabilityScanResult(BaseModel):
    """Vulnerability scan results for a specific endpoint/URL"""
    url: str
    subdomain: str
    scan_status: str = "pending"  # pending, scanning, completed, failed
    vulnerabilities: List[VulnerabilityInfo] = Field(default_factory=list)
    total_vulnerabilities: int = 0
    critical_count: int = 0
    high_count: int = 0
    medium_count: int = 0
    low_count: int = 0
    info_count: int = 0
    tools_used: List[VulnerabilityTool] = Field(default_factory=list)
    scan_duration: Optional[float] = None  # seconds
    scanned_at: Optional[datetime] = None
    error_message: Optional[str] = None


class VulnerabilityScanJob(BaseModel):
    """Vulnerability scanning job"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    target_id: str
    domain: str
    urls: List[str] = Field(default_factory=list)  # URLs to scan
    status: str = "pending"  # pending, running, completed, failed, partial
    tools: List[VulnerabilityTool] = Field(default_factory=list)
    results: List[VulnerabilityScanResult] = Field(default_factory=list)
    
    # Job metadata
    total_urls: int = 0
    completed_urls: int = 0
    failed_urls: int = 0
    total_vulnerabilities: int = 0
    critical_vulnerabilities: int = 0
    high_vulnerabilities: int = 0
    medium_vulnerabilities: int = 0
    low_vulnerabilities: int = 0
    info_vulnerabilities: int = 0
    
    # Timing
    created_at: datetime = Field(default_factory=datetime.utcnow)
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    estimated_duration: Optional[float] = None  # seconds
    
    # Configuration
    deep_scan: bool = False
    include_low_severity: bool = True
    max_threads: int = 10
    timeout_per_url: int = 300  # seconds
    notes: Optional[str] = None


class StartVulnerabilityScanRequest(BaseModel):
    """Request to start vulnerability scanning"""
    tools: Optional[List[VulnerabilityTool]] = None
    urls: Optional[List[str]] = None  # Specific URLs to scan, if None will use endpoints from JavaScript discovery
    deep_scan: bool = False
    include_low_severity: bool = True
    max_threads: int = 10
    timeout_per_url: int = 300
    notes: Optional[str] = None


class VulnerabilitySearchRequest(BaseModel):
    """Request to search vulnerability results"""
    vulnerability_type: Optional[VulnerabilityType] = None
    severity: Optional[VulnerabilitySeverity] = None
    min_confidence: float = Field(default=0.0, ge=0.0, le=1.0)
    tool: Optional[VulnerabilityTool] = None
    url_pattern: Optional[str] = None
    parameter_pattern: Optional[str] = None
    limit: int = Field(default=100, ge=1, le=1000)
    offset: int = Field(default=0, ge=0)


class VulnerabilityStats(BaseModel):
    """Overall vulnerability scanning statistics"""
    total_scans: int = 0
    total_vulnerabilities: int = 0
    
    # By severity
    critical_vulnerabilities: int = 0
    high_vulnerabilities: int = 0
    medium_vulnerabilities: int = 0
    low_vulnerabilities: int = 0
    info_vulnerabilities: int = 0
    
    # By type
    vulnerability_types: Dict[str, int] = Field(default_factory=dict)
    
    # By tool
    tools_used: Dict[str, int] = Field(default_factory=dict)
    
    # Recent activity
    scans_last_24h: int = 0
    vulnerabilities_last_24h: int = 0
    
    # Top vulnerable domains
    top_vulnerable_domains: List[Dict[str, Any]] = Field(default_factory=list)